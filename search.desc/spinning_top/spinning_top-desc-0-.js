searchState.loadedDescShard("spinning_top", 0, "Provides simple spinlocks based on the abstractions …\nA <code>lock_api::RwLock</code> based on <code>RawRwSpinlock</code><code>&lt;</code><code>Backoff</code><code>&gt;</code>.\nA mutual exclusion (Mutex) type based on busy-waiting with …\nA simple, spinning, read-preferring readers-writer lock.\nProvides mutual exclusion based on spinning on an …\nA <code>lock_api::RwLock</code> based on <code>RawRwSpinlock</code>.\nA mutual exclusion (Mutex) type based on busy-waiting.\nReturns the argument unchanged.\nReturns the argument unchanged.\nType aliases for guards.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe spinlock implemenation is based on the abstractions …\nRelax strategies.\nA <code>lock_api::RwLockReadGuard</code> based on <code>RawRwSpinlock</code><code>&lt;</code><code>Backoff</code><code>&gt;</code>…\nA <code>lock_api::RwLockUpgradableReadGuard</code> based on …\nA <code>lock_api::RwLockWriteGuard</code> based on <code>RawRwSpinlock</code><code>&lt;</code><code>Backoff</code>…\nA RAII guard that frees the exponential backoff spinlock …\nA RAII guard returned by <code>BackoffSpinlockGuard::map</code>.\nA RAII guard returned by <code>SpinlockGuard::map</code>.\nA <code>lock_api::RwLockReadGuard</code> based on <code>RawRwSpinlock</code>.\nA <code>lock_api::RwLockUpgradableReadGuard</code> based on …\nA <code>lock_api::RwLockWriteGuard</code> based on <code>RawRwSpinlock</code>.\nA RAII guard that frees the spinlock when it goes out of …\nExponential backoff.\nA relax strategy.\nRapid spinning.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRelaxes the current thread.")